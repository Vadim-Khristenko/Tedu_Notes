name: Deploy site to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: publish-pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Set up Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: '20'

      - name: Detect package manager
        id: detect-pm
        run: |
          if [ -f pnpm-lock.yaml ]; then echo "pkg_manager=pnpm" >> $GITHUB_OUTPUT; fi
          if [ -f package-lock.json ]; then echo "pkg_manager=npm" >> $GITHUB_OUTPUT; fi
          if [ -f yarn.lock ]; then echo "pkg_manager=yarn" >> $GITHUB_OUTPUT; fi

      - name: Install dependencies
        run: |
          echo "Using package manager: ${{ steps.detect-pm.outputs.pkg_manager }}"
          if [ "${{ steps.detect-pm.outputs.pkg_manager }}" = "pnpm" ]; then npm i -g pnpm@latest; pnpm install --frozen-lockfile; fi
          if [ "${{ steps.detect-pm.outputs.pkg_manager }}" = "yarn" ]; then corepack enable; corepack prepare yarn@stable --activate; yarn install --frozen-lockfile; fi
          if [ "${{ steps.detect-pm.outputs.pkg_manager }}" = "npm" ]; then npm ci; fi

      - name: Create .env from secrets
        env:
          ENV_FILE: '${{ secrets.ENV_FILE }}'
          PUBLIC_TIMEZONE: '${{ secrets.PUBLIC_TIMEZONE }}'
          TOKEN: '${{ secrets.TOKEN }}'
        run: |
          # Hardening: restrict file permissions and avoid accidental printing of secret values
          umask 077
          # Ensure shell does not accidentally print expanded variables
          set +x
          # Prefer a single encoded ENV_FILE secret which can contain literal \n sequences
          if [ -n "$ENV_FILE" ]; then
            # Replace literal \n with actual newlines and write to .env without printing secret contents
            printf "%b" "$ENV_FILE" > .env
          else
            # Fallback: write individual secrets into .env if present; use printf to avoid extra expansions
            if [ -n "$PUBLIC_TIMEZONE" ]; then printf '%s\n' "PUBLIC_TIMEZONE=$PUBLIC_TIMEZONE" >> .env; fi
            if [ -n "$TOKEN" ]; then printf '%s\n' "TOKEN=$TOKEN" >> .env; fi
          fi
          chmod 600 .env
        shell: bash

      - name: Build site
        run: |
          if npm run build --if-present; then exit 0; fi
          echo "Build script not found or failed. Ensure your project exposes 'build' script."

      - name: Upload Pages artifact
        id: upload-pages
        uses: actions/upload-pages-artifact@v4.0.0
        with:
          path: './dist'

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4.0.5
---
import type { MarkdownHeading } from "astro";
import { i18n } from "astro:config/client";
import { getCollection, render } from "astro:content";
import Time from "$utils/time";
import Base from "$layouts/Base.astro";
import Icon from "$components/Icon.astro";
import TOC from "$components/note/TOC.astro";
import Position from "$components/Position.astro";
import Sensitive from "$components/Sensitive.svelte";
import i18nit from "$i18n";

export async function getStaticPaths() {
	// Get all notes excluding drafts
	const notes = await getCollection("note", note => !note.data.draft);

	return notes.map(note => {
		// Extract language and note ID from file path structure
		const [language, ...id] = note.id.split("/");

		// Generate path params with optional locale (omit for default locale)
		return { params: { locale: language == i18n?.defaultLocale ? undefined : language, id: id.join("/") }, props: { note } };
	});
}

const { locale = i18n!.defaultLocale } = Astro.params;
const { note } = Astro.props;

// Render markdown content and extract headings for TOC
const { Content, headings, remarkPluginFrontmatter: frontmatter } = await render(note);

// Build hierarchical table of contents from flat heading list
type Heading = MarkdownHeading & { subheadings: Heading[] };
const table_of_contents: Heading[] = [];
const stack: Heading[] = [];
for (const item of headings) {
	// Pop headings from stack that are at same or deeper level
	while (stack[stack.length - 1]?.depth >= item.depth) stack.pop();
	const heading: Heading = { ...item, subheadings: [] };

	if (stack.length > 0) {
		// Add as subheading to current parent
		const parent = stack[stack.length - 1];
		parent.subheadings.push(heading);
	} else {
		// Add as top-level heading
		table_of_contents.push(heading);
	}

	stack.push(heading);
}

const t = i18nit(locale);
// Helper: split title by \n or <br> into lines for multi-line headings.
// Controlled by frontmatter flag `title_split` (if false -> do not split; replace separators with space).
function formatTitle(raw: unknown, splitEnabled = true): string[] {
	if (raw === undefined || raw === null) return [''];
	const s = String(raw);
	if (!splitEnabled) {
		// replace separators with a single space
		const single = s.replace(/<br\s*\/?>(\s*)/gi, ' ').replace(/\n+/g, ' ');
		return [single.trim()];
	}
	const replaced = s.replace(/<br\s*\/?>(\s*)/gi, '\n');
	return replaced.split('\n').map((l) => l.trim());
}

const titleSplitEnabled: boolean = note.data?.title_split === false ? false : true;
const titleLines: string[] = formatTitle(note.data.title, titleSplitEnabled);

// Generate breadcrumbs
let localePrefix = locale === i18n?.defaultLocale ? '' : `/${locale}`;
if (localePrefix === '/ru') { localePrefix = ''; } // Russian is default locale
let realNoteId = typeof note.id === 'string' ? note.id.replace(/^[^/]*\//, '') : String(note.id);
const breadcrumbs = [
	{ label: t("navigation.home"), href: `${localePrefix}/` },
	{ label: t("navigation.note"), href: `${localePrefix}/note` },
];
if (note.data.series) {
	breadcrumbs.push({ label: note.data.series, href: `${localePrefix}/note?series=${encodeURIComponent(note.data.series)}` });
}
breadcrumbs.push({ label: formatTitle(note.data.title).join(" - "), href: '#' });

// Structured data for SEO
const structuredData = {
	"@context": "https://schema.org",
	"@type": "Article",
	"headline": note.data.title,
	"description": note.data.description,
	"author": {
		"@type": "Person",
		"name": "Vadim Khristenko"
	},
	"datePublished": note.data.timestamp.toISOString(),
	"dateModified": note.data.timestamp.toISOString(),
	"mainEntityOfPage": {
		"@type": "WebPage",
		"@id": `https://tedu-notes.ru${localePrefix}/note/${note.id.replace(/\//g, '-')}`
	},
	"publisher": {
		"@type": "Organization",
		"name": "T-EDU Notes",
		"logo": {
			"@type": "ImageObject",
			"url": "https://tedu-notes.ru/favicon.svg"
		}
	},
	"articleSection": note.data.series || "Notes",
	"keywords": note.data.tags?.join(", "),
	"wordCount": frontmatter.words,
	"timeRequired": `PT${Math.ceil(frontmatter.words / 200)}M` // Estimate reading time
};
---

<Base title={note.data.title} {locale} description={note.data.description} article={{ timestamp: note.data.timestamp, section: note.data.series, tags: note.data.tags }}>
	<!-- Structured Data -->
	<script type="application/ld+json" set:html={JSON.stringify(structuredData)} is:inline />

	<!-- Reading Progress Bar -->
	<div id="reading-progress" class="fixed top-0 left-0 w-full h-1 bg-primary z-50 transition-all duration-300"></div>

	<main class="flex flex-col gap-6">
		<!-- Breadcrumbs -->
		<nav aria-label="Breadcrumb" class="flex items-center gap-2 text-sm text-secondary">
			{breadcrumbs.map((crumb, index) => (
				<>
					{index > 0 && <Icon name="lucide:chevron-right" class="w-4 h-4" />}
					{crumb.href.startsWith('#') ? (
						<span class="font-medium">{crumb.label}</span>
					) : (
						<a href={crumb.href} class="hover:text-primary transition-colors">{crumb.label}</a>
					)}
				</>
			))}
		</nav>

		<header class="flex flex-col gap-4">
			<style>
				.title-line { display: block; line-height: 1.1; }
			</style>
			<h1 class="text-3xl">
				{titleLines.map(line => (
					<span class="title-line">{line}</span>
				))}
			</h1>
			<div class="flex flex-col gap-3 sm:flex-row children:(flex items-center gap-1 text-3.5 c-secondary)">
				<time title={Time.full(note.data.timestamp)} datetime={note.data.timestamp.toISOString()}>
					<Icon name="lucide:calendar" />
					{Time(note.data.timestamp)}
				</time>
				{
					note.data.series && (
						<span>
							<Icon name="lucide:layers" />
							{note.data.series}
						</span>
					)
				}
				{
					note.data.tags?.length && (
						<span>
							<Icon name="lucide:hash" />
							{note.data.tags?.join("; ")}
						</span>
					)
				}
				<span>
					<Icon name="lucide:pilcrow" />
					{t("read.words", { words: frontmatter.words })}
				</span>
				<span>
					<Icon name="lucide:clock" />
					{Math.ceil(frontmatter.words / 200)} {t("read.minutes")}
				</span>
			</div>
			<hr class="b-b b-b-solid b-weak" />
		</header>

		<Sensitive {locale} back="/note" sensitive={note.data.sensitive} client:load>
			<div class="flex gap-5">
				<section id="markdown-content" class="markdown">
					<Content />
				</section>
				{
					note.data.contents && (
						<aside class="hidden sm:(block flex-shrink-0 w-200px)">
							<div class="sticky top-3 flex flex-col gap-2">
								<h3>{t("note.contents")}</h3>
								<nav class="overflow-y-auto max-h-80vh">
									<TOC headings={table_of_contents} />
								</nav>
							</div>
						</aside>
					)
				}
			</div>
		</Sensitive>

		<!-- Social Share Buttons -->
		<div class="flex gap-3 items-center social-share">
			<span class="text-sm text-secondary">{t("share.title")}:</span>
			{/** Common template for share url and label */}
			{/** Twitter / X */}
			<a
				href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(note.data.title)}&url=${encodeURIComponent(`https://tedu-notes.ru${localePrefix}/note/${realNoteId}`)}`}
				target="_blank"
				rel="noopener noreferrer"
				class="share-btn share-btn--twitter"
				aria-label={t("share.twitter")}
			>
				<Icon name="simple-icons:x" class="w-4 h-4" />
				<span class="sr-only">{t("share.twitter")}</span>
			</a>

			{/** Telegram */}
			<a
				href={`https://t.me/share/url?url=${encodeURIComponent(`https://tedu-notes.ru${localePrefix}/note/${realNoteId}`)}&text=${encodeURIComponent(note.data.title)}`}
				target="_blank"
				rel="noopener noreferrer"
				class="share-btn share-btn--telegram"
				aria-label={t("share.telegram")}
			>
				<Icon name="simple-icons:telegram" class="w-4 h-4" />
				<span class="sr-only">{t("share.telegram")}</span>
			</a>

			{/** LinkedIn */}
			<a
				href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(`https://tedu-notes.ru${localePrefix}/note/${realNoteId}`)}`}
				target="_blank"
				rel="noopener noreferrer"
				class="share-btn share-btn--linkedin"
				aria-label={t("share.linkedin")}
			>
				<Icon name="simple-icons:linkedin" class="w-4 h-4" />
				<span class="sr-only">{t("share.linkedin")}</span>
			</a>
		</div>

		<Position {locale} />
	</main>
</Base>

<script>
	// Reading Progress Bar
	function updateProgress() {
		const content = document.getElementById('markdown-content');
		const progress = document.getElementById('reading-progress');
		if (!content || !progress) return;

		const contentTop = content.offsetTop;
		const contentHeight = content.offsetHeight;
		const windowHeight = window.innerHeight;
		const scrollTop = window.scrollY;

		const progressPercent = Math.min(100, Math.max(0,
			((scrollTop - contentTop + windowHeight) / contentHeight) * 100
		));

		progress.style.width = `${progressPercent}%`;
	}

	document.addEventListener('scroll', updateProgress);
	document.addEventListener('DOMContentLoaded', updateProgress);

	// Smooth scroll for TOC links
	document.addEventListener('click', (e) => {
		const target = e.target as HTMLElement;
		if (target.matches('a[href^="#"]')) {
			e.preventDefault();
			const id = target.getAttribute('href')?.slice(1);
			const element = document.getElementById(id || '');
			if (element) {
				element.scrollIntoView({ behavior: 'smooth' });
			}
		}
	});
</script>

<style>
/* Small helper for accessible text only visible to screen readers */
.sr-only {
	position: absolute !important;
	width: 1px !important;
	height: 1px !important;
	padding: 0 !important;
	margin: -1px !important;
	overflow: hidden !important;
	clip: rect(0,0,0,0) !important;
	white-space: nowrap !important;
	border: 0 !important;
}

.share-btn {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	gap: 0.5rem;
	width: 40px;
	height: 36px;
	border-radius: 8px;
	color: var(--background-color);
	transition: transform 0.12s ease, background-color 0.12s ease;
}
.share-btn--twitter { background: #1DA1F2; }
.share-btn--twitter:hover { background: #0d8ae6; transform: translateY(-2px); }
.share-btn--telegram { background: #26A5E4; }
.share-btn--telegram:hover { background: #1b8fc5; transform: translateY(-2px); }
.share-btn--linkedin { background: #0077B5; }
.share-btn--linkedin:hover { background: #005f95; transform: translateY(-2px); }
</style>
